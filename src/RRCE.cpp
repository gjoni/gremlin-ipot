/*
 * RRCE.cpp
 *
 *  Created on: May 27, 2016
 *      Author: ivan
 */

#include <cstdlib>
#include <cstring>
#include <cassert>
#include <cstdio>

#include "RRCE.h"

RRCE::RRCE(RRCE_TYPE type, double d, int k) :
		h(NULL), J(NULL), dmax(d) {

	char *DATADIR = getenv("TMDOCKDAT");
	if (DATADIR == NULL) {
		printf("Error: environment variable 'TMDOCKDAT' not set\n");
		exit(1);
	}

	const int STRMAX = 1000;
	char tname[STRMAX], rrce_name[STRMAX];

	switch (type) {

	case RRCE20RC:
		sprintf(tname, "%s/RRCE20RC/table.%.1fA_k%d", DATADIR, dmax, k);
		sprintf(rrce_name, "RRCE20RC_%.1fA_k%d", dmax, k);
		break;

	case RRCE20SCC:
		sprintf(tname, "%s/RRCE20SCC/table.%.1fA_k%d", DATADIR, dmax, k);
		sprintf(rrce_name, "RRCE20SCC_%.1fA_k%d", dmax, k);
		break;

	case RRCE20CB:
		sprintf(tname, "%s/RRCE20CB/table.%.1fA_k%d", DATADIR, dmax, k);
		sprintf(rrce_name, "RRCE20CB_%.1fA_k%d", dmax, k);
		break;

	default:
		printf("Error: wrong RRCE type (%d)\n", type);
		exit(1);
		break;

	}

	Allocate(20);

	ReadCouplings(tname);

	name = rrce_name;

}

RRCE::RRCE(const RRCE &source) :
		h(NULL), J(NULL), dmax(source.dmax), name(source.name) {

	const int N = 20;

	Allocate(N);

	memcpy(h, source.h, N * sizeof(double));
	for (int i = 0; i < N; i++) {
		memcpy(J[i], source.J[i], N * sizeof(double));
	}

}

RRCE::RRCE(const char *fname) {

	Allocate(20);
	ReadCouplings(fname);
	name = fname;

}

RRCE::RRCE() :
		h(NULL), J(NULL), dmax(0.0), name("") {

	Allocate(20);

	name = "RRCE20RC/table.7.8A_k4";

	double h_[20] = { -7.57430e-01, -6.77567e-01, -6.49578e-01, -1.22003e+00,
			2.25192e+00, -6.04999e-01, -1.45026e+00, -8.46888e-01, 4.29855e-01,
			7.38604e-01, -1.18461e-01, -1.24716e+00, 1.44304e+00, 1.11336e+00,
			-6.84326e-01, -7.51178e-01, -4.17259e-01, 2.01788e+00, 9.70372e-01,
			4.60113e-01 };

	double J_[20][20] = { { -1.81758e-01, 1.73299e-01, 2.27268e-01, 2.86482e-01,
			-1.20706e-01, 1.82351e-01, 3.19646e-01, -1.54892e-02, 1.11356e-01,
			-1.72513e-01, -1.76941e-01, 3.50771e-01, -1.12003e-01, -1.60646e-01,
			1.22227e-01, 1.18965e-01, 4.26344e-02, -1.22490e-01, -5.99195e-02,
			-2.12172e-01 }, { 1.73299e-01, 4.07804e-01, 2.31311e-01,
			-2.89004e-01, 1.32657e-02, 2.27750e-01, -2.74622e-01, 6.42448e-02,
			2.23772e-01, 9.67263e-02, 5.19288e-02, 7.97527e-01, 1.03054e-01,
			3.07382e-02, 1.55936e-01, 1.43434e-01, 1.28421e-01, -1.57532e-01,
			-4.79128e-02, 5.53174e-02 }, { 2.27268e-01, 2.31311e-01,
			-1.40503e-01, 8.79069e-02, -1.24451e-03, 1.24034e-01, 2.81201e-01,
			-4.66507e-03, 1.16779e-01, 1.15700e-01, 2.67227e-01, 2.23842e-01,
			1.17337e-01, 9.69405e-02, 1.56760e-01, 8.82559e-03, 1.60962e-02,
			2.29361e-02, -3.15077e-03, 1.50738e-01 }, { 2.86482e-01,
			-2.89004e-01, 8.79069e-02, 5.47274e-01, 1.66768e-01, 2.24693e-01,
			7.62326e-01, 1.02344e-01, -1.22381e-01, 2.69102e-01, 3.70687e-01,
			-1.45698e-01, 2.61734e-01, 2.71005e-01, 2.83372e-01, 1.14939e-01,
			1.31859e-01, 1.11608e-01, 6.05523e-02, 2.30133e-01 },
			{ -1.20706e-01, 1.32657e-02, -1.24451e-03, 1.66768e-01,
					-1.51538e+00, 2.68651e-02, 2.17912e-01, -1.29736e-01,
					-2.46849e-01, -3.16523e-01, -2.87174e-01, 1.17591e-01,
					-3.23196e-01, -4.38059e-01, -9.79109e-02, -8.81192e-02,
					-8.55082e-02, -4.29444e-01, -2.97982e-01, -3.23876e-01 }, {
					1.82351e-01, 2.27750e-01, 1.24034e-01, 2.24693e-01,
					2.68651e-02, 1.12380e-01, 3.35818e-01, 1.61642e-01,
					1.80512e-01, 6.84316e-02, 9.62320e-02, 3.73960e-01,
					9.34448e-02, 5.15424e-02, 1.86162e-01, 1.09111e-01,
					7.69358e-02, -1.02558e-01, 2.15623e-02, 7.24869e-02 }, {
					3.19646e-01, -2.74622e-01, 2.81201e-01, 7.62326e-01,
					2.17912e-01, 3.35818e-01, 6.93415e-01, 2.98262e-01,
					2.72172e-02, 1.69035e-01, 2.71209e-01, -1.48507e-01,
					2.43058e-01, 2.31816e-01, 3.93407e-01, 2.36695e-01,
					2.27643e-01, 1.04522e-01, 1.02069e-01, 1.58639e-01 }, {
					-1.54892e-02, 6.42448e-02, -4.66507e-03, 1.02344e-01,
					-1.29736e-01, 1.61642e-01, 2.98262e-01, -1.53911e-01,
					1.77717e-02, 1.09494e-01, 1.33209e-01, 2.28111e-01,
					-1.11994e-02, 1.88546e-03, 3.33688e-02, -2.74863e-02,
					9.15925e-03, -5.14809e-02, 5.22006e-04, 4.37762e-02 }, {
					1.11356e-01, 2.23772e-01, 1.16779e-01, -1.22381e-01,
					-2.46849e-01, 1.80512e-01, 2.72172e-02, 1.77717e-02,
					-3.25225e-01, -1.29447e-02, 2.41990e-02, 5.03484e-01,
					-8.54102e-02, -1.11963e-01, 6.71374e-02, -3.23138e-02,
					-2.02522e-02, -2.57211e-01, -1.73037e-01, -3.10467e-02 }, {
					-1.72513e-01, 9.67263e-02, 1.15700e-01, 2.69102e-01,
					-3.16523e-01, 6.84316e-02, 1.69035e-01, 1.09494e-01,
					-1.29447e-02, -6.51622e-01, -4.89921e-01, 7.63634e-02,
					-3.58419e-01, -5.02432e-01, 1.24660e-01, 4.45931e-02,
					-1.27703e-01, -3.11854e-01, -4.02332e-01, -5.28822e-01 }, {
					-1.76941e-01, 5.19288e-02, 2.67227e-01, 3.70687e-01,
					-2.87174e-01, 9.62320e-02, 2.71209e-01, 1.33209e-01,
					2.41990e-02, -4.89921e-01, -4.97145e-01, 2.22510e-01,
					-2.94150e-01, -4.67140e-01, 1.16776e-01, 1.17875e-01,
					-4.68063e-03, -3.56262e-01, -3.30677e-01, -4.35098e-01 }, {
					3.50771e-01, 7.97527e-01, 2.23842e-01, -1.45698e-01,
					1.17591e-01, 3.73960e-01, -1.48507e-01, 2.28111e-01,
					5.03484e-01, 7.63634e-02, 2.22510e-01, 6.15183e-01,
					2.46536e-01, 1.64946e-01, 4.65982e-01, 2.15016e-01,
					1.91963e-01, 1.15082e-01, -8.47554e-03, 1.16652e-01 }, {
					-1.12003e-01, 1.03054e-01, 1.17337e-01, 2.61734e-01,
					-3.23196e-01, 9.34448e-02, 2.43058e-01, -1.11994e-02,
					-8.54102e-02, -3.58419e-01, -2.94150e-01, 2.46536e-01,
					-6.75490e-01, -4.62107e-01, 4.69406e-02, 5.03143e-02,
					-7.86752e-03, -4.08658e-01, -3.19349e-01, -3.01250e-01 }, {
					-1.60646e-01, 3.07382e-02, 9.69405e-02, 2.71005e-01,
					-4.38059e-01, 5.15424e-02, 2.31816e-01, 1.88546e-03,
					-1.11963e-01, -5.02432e-01, -4.67140e-01, 1.64946e-01,
					-4.62107e-01, -6.70901e-01, -4.33315e-02, -2.82174e-02,
					-7.68646e-02, -5.24674e-01, -4.79839e-01, -4.31819e-01 }, {
					1.22227e-01, 1.55936e-01, 1.56760e-01, 2.83372e-01,
					-9.79109e-02, 1.86162e-01, 3.93407e-01, 3.33688e-02,
					6.71374e-02, 1.24660e-01, 1.16776e-01, 4.65982e-01,
					4.69406e-02, -4.33315e-02, 1.34213e-02, 1.46698e-01,
					1.14398e-01, -3.12769e-01, -1.84937e-01, 5.86732e-02 }, {
					1.18965e-01, 1.43434e-01, 8.82559e-03, 1.14939e-01,
					-8.81192e-02, 1.09111e-01, 2.36695e-01, -2.74863e-02,
					-3.23138e-02, 4.45931e-02, 1.17875e-01, 2.15016e-01,
					5.03143e-02, -2.82174e-02, 1.46698e-01, -3.83081e-02,
					1.31735e-02, -5.27720e-02, -1.59573e-03, 2.07534e-02 }, {
					4.26344e-02, 1.28421e-01, 1.60962e-02, 1.31859e-01,
					-8.55082e-02, 7.69358e-02, 2.27643e-01, 9.15925e-03,
					-2.02522e-02, -1.27703e-01, -4.68063e-03, 1.91963e-01,
					-7.86752e-03, -7.68646e-02, 1.14398e-01, 1.31735e-02,
					-9.27658e-02, -3.91160e-02, -6.80600e-02, -1.61519e-01 }, {
					-1.22490e-01, -1.57532e-01, 2.29361e-02, 1.11608e-01,
					-4.29444e-01, -1.02558e-01, 1.04522e-01, -5.14809e-02,
					-2.57211e-01, -3.11854e-01, -3.56262e-01, 1.15082e-01,
					-4.08658e-01, -5.24674e-01, -3.12769e-01, -5.27720e-02,
					-3.91160e-02, -6.29781e-01, -3.89470e-01, -2.80970e-01 }, {
					-5.99195e-02, -4.79128e-02, -3.15077e-03, 6.05523e-02,
					-2.97982e-01, 2.15623e-02, 1.02069e-01, 5.22006e-04,
					-1.73037e-01, -4.02332e-01, -3.30677e-01, -8.47554e-03,
					-3.19349e-01, -4.79839e-01, -1.84937e-01, -1.59573e-03,
					-6.80600e-02, -3.89470e-01, -3.58262e-01, -3.24964e-01 }, {
					-2.12172e-01, 5.53174e-02, 1.50738e-01, 2.30133e-01,
					-3.23876e-01, 7.24869e-02, 1.58639e-01, 4.37762e-02,
					-3.10467e-02, -5.28822e-01, -4.35098e-01, 1.16652e-01,
					-3.01250e-01, -4.31819e-01, 5.86732e-02, 2.07534e-02,
					-1.61519e-01, -2.80970e-01, -3.24964e-01, -5.67799e-01 } };

	for (int i = 0; i < 20; i++) {
		h[i] = h_[i];
		for (int j = 0; j < 20; j++) {
			J[i][j] = J_[i][j];
		}
	}

}

RRCE::~RRCE() {

	Free(20);

}

RRCE & RRCE::operator =(const RRCE & source) {

	assert(this != &source);

	const int N = 20;

	Free(N);

	dmax = source.dmax;
	name = source.name;

	Allocate(N);

	memcpy(h, source.h, N * sizeof(double));
	for (int i = 0; i < N; i++) {
		memcpy(J[i], source.J[i], N * sizeof(double));
	}

	return *this;

}

void RRCE::Allocate(int N) {

	h = (double*) malloc(N * sizeof(double));
	J = (double**) malloc(N * sizeof(double*));
	for (int i = 0; i < N; i++) {
		J[i] = (double*) malloc(N * sizeof(double));
	}

}

void RRCE::Free(int N) {

	if (J != NULL) {
		for (int i = 0; i < N; i++) {
			free(J[i]);
		}
		free(J);
	}
	free(h);

}

int RRCE::ReadCouplings(const char *name) {

	FILE *F = fopen(name, "r");
	if (F == NULL) {
		printf("Error: cannot open %s file\n", name);
		exit(1);
	}

	const int STRMAX = 10000;
	char buf[STRMAX];

	const int N = 20;

	for (int i = 0; i < N; i++) {
		fgets(buf, STRMAX, F);
		char * pch;
		pch = strtok(buf, " "); /* label */
		pch = strtok(NULL, " "); /* local field */
		h[i] = atof(pch);
		for (int j = 0; j < N; j++) {
			pch = strtok(NULL, " ");
			J[i][j] = atof(pch);
		}
	}
	fclose(F);

	return 0;

}

std::string RRCE::GetName() {

	return name;

}

void RRCE::GetCouplings(double **J_) {

	for (int i = 0; i < 20; i++) {
		for (int j = 0; j < 20; j++) {
			J_[i][j] = J[i][j];
		}
	}

}

void RRCE::GetFields(double *h_) {

	for (int i = 0; i < 20; i++) {
		h_[i] = h[i];
	}

}
