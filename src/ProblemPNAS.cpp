/*
 * ProblemPNAS.cpp
 *
 *  Created on: Aug 23, 2017
 *      Author: ivan
 */

#include <cstring>
#include <cassert>
#include <cmath>

#include "ProblemPNAS.h"

const double ProblemPNAS::peak1[] = { 1.3871864, 0.5205342, 0.6032303,
		0.7149639, 1.1241825, 0.7482772, 0.7954784, 1.4454355, 0.9707325,
		1.1295739, 1.2463222, 0.9244060, 1.4606961, 1.2499578, 2.5977850,
		0.7156192, 0.5982792, 0.8060647, 0.6574268, 0.8440735, 0.5205342,
		0.2340597, -1.0339391, -2.4773868, 0.5428453, -0.9967660, -2.4515144,
		0.6751554, -0.1994067, 0.5881968, 0.6591716, 0.6283451, 0.6639098,
		0.5953451, 1.3018324, -0.5328391, -0.7030171, 0.0801531, -0.4294233,
		0.5327105, 0.6032303, -1.0339391, -1.6878836, -1.1373547, -0.0374428,
		-0.9974973, -0.7650220, 0.4865134, -0.5160650, 0.8731970, 1.1001319,
		-0.6327550, 0.6829353, 0.5727671, 1.5145467, -1.0030738, -0.9622962,
		-0.3274550, -0.7423614, 0.4905891, 0.7149639, -2.4773868, -1.1373547,
		-0.0583923, 0.7400173, -0.6688225, 0.4499923, 0.1019311, -1.8328862,
		1.3736751, 1.4022148, -1.9017852, 1.1673656, 1.5707801, 2.4474258,
		-1.1827272, -1.0523083, -0.7553621, -1.6185318, 1.1021484, 1.1241825,
		0.5428453, -0.0374428, 0.7400173, -3.3305189, 0.7851385, 0.9774507,
		0.7591643, 0.8462620, 0.8646247, 0.9562820, 1.1370793, 0.9591412,
		0.2371899, 2.9978299, 0.3397486, 0.2085783, 0.4962682, 0.4337465,
		0.8905072, 0.7482772, -0.9967660, -0.9974973, -0.6688225, 0.7851385,
		-1.0623452, -0.7131904, 0.6614651, -0.5338403, 0.6638452, 0.7846896,
		-0.6948446, 0.6620591, 0.8511641, 1.7532684, -0.6715626, -0.8772975,
		-0.3157784, -0.5359398, 0.6230568, 0.7954784, -2.4515144, -0.7650220,
		0.4499923, 0.9774507, -0.7131904, 0.3898089, 0.5902160, -1.5711319,
		0.8923449, 1.0886459, -1.8524923, 0.8610818, 1.3372784, 2.3895854,
		-0.9843139, -0.8746611, -0.5894540, -1.3890177, 0.6699963, 1.4454355,
		0.6751554, 0.4865134, 0.1019311, 0.7591643, 0.6614651, 0.5902160,
		1.5424810, 0.7444528, 1.4752243, 1.6935317, 0.8041413, 1.6834403,
		0.6579147, 2.0274739, 0.5100668, 0.4362631, 0.4888554, 0.2256238,
		0.9034586, 0.9707325, -0.1994067, -0.5160650, -1.8328862, 0.8462620,
		-0.5338403, -1.5711319, 0.7444528, -1.5658367, 1.2672141, 1.1675505,
		-0.0379435, 0.5086564, 0.9635355, 1.8927851, -1.5543057, -1.3917120,
		0.0202305, -1.5854805, 1.0527976, 1.1295739, 0.5881968, 0.8731970,
		1.3736751, 0.8646247, 0.6638452, 0.8923449, 1.4752243, 1.2672141,
		0.5527495, 0.8964522, 0.8944311, 1.0556363, 0.8938631, 3.0689646,
		0.8276688, 0.7287665, 0.9493850, 0.7342641, 0.6812347, 1.2463222,
		0.6591716, 1.1001319, 1.4022148, 0.9562820, 0.7846896, 1.0886459,
		1.6935317, 1.1675505, 0.8964522, 1.1016726, 0.9380922, 1.0487812,
		1.2424091, 2.8028063, 0.9230123, 1.0137152, 0.9864366, 0.8358662,
		0.7314697, 0.9244060, 0.6283451, -0.6327550, -1.9017852, 1.1370793,
		-0.6948446, -1.8524923, 0.8041413, -0.0379435, 0.8944311, 0.9380922,
		0.1863352, 0.7296178, 1.0247880, 1.4144533, -0.3039412, -0.3946247,
		0.6000309, -0.0043429, 0.7670366, 1.4606961, 0.6639098, 0.6829353,
		1.1673656, 0.9591412, 0.6620591, 0.8610818, 1.6834403, 0.5086564,
		1.0556363, 1.0487812, 0.7296178, 1.0007638, 1.1184119, 2.9964733,
		0.6212016, 0.6728655, 0.4406933, 0.4754780, 0.6476228, 1.2499578,
		0.5953451, 0.5727671, 1.5707801, 0.2371899, 0.8511641, 1.3372784,
		0.6579147, 0.9635355, 0.8938631, 1.2424091, 1.0247880, 1.1184119,
		0.4003565, 3.2178046, 0.8860583, 0.8816463, 0.6576151, 0.4506268,
		0.4186625, 2.5977850, 1.3018324, 1.5145467, 2.4474258, 2.9978299,
		1.7532684, 2.3895854, 2.0274739, 1.8927851, 3.0689646, 2.8028063,
		1.4144533, 2.9964733, 3.2178046, 4.4163812, 1.3737593, 1.6945387,
		2.5682548, 1.0400152, 3.4467116, 0.7156192, -0.5328391, -1.0030738,
		-1.1827272, 0.3397486, -0.6715626, -0.9843139, 0.5100668, -1.5543057,
		0.8276688, 0.9230123, -0.3039412, 0.6212016, 0.8860583, 1.3737593,
		-0.6552979, -0.8371150, -0.6193242, -0.6838059, 0.5626685, 0.5982792,
		-0.7030171, -0.9622962, -1.0523083, 0.2085783, -0.8772975, -0.8746611,
		0.4362631, -1.3917120, 0.7287665, 1.0137152, -0.3946247, 0.6728655,
		0.8816463, 1.6945387, -0.8371150, -1.0547125, -0.7342536, -0.4526637,
		0.6354638, 0.8060647, 0.0801531, -0.3274550, -0.7553621, 0.4962682,
		-0.3157784, -0.5894540, 0.4888554, 0.0202305, 0.9493850, 0.9864366,
		0.6000309, 0.4406933, 0.6576151, 2.5682548, -0.6193242, -0.7342536,
		0.8984571, -0.0087568, 0.7219009, 0.6574268, -0.4294233, -0.7423614,
		-1.6185318, 0.4337465, -0.5359398, -1.3890177, 0.2256238, -1.5854805,
		0.7342641, 0.8358662, -0.0043429, 0.4754780, 0.4506268, 1.0400152,
		-0.6838059, -0.4526637, -0.0087568, 0.0000809, 0.5117356, 0.8440735,
		0.5327105, 0.4905891, 1.1021484, 0.8905072, 0.6230568, 0.6699963,
		0.9034586, 1.0527976, 0.6812347, 0.7314697, 0.7670366, 0.6476228,
		0.4186625, 3.4467116, 0.5626685, 0.6354638, 0.7219009, 0.5117356,
		0.6402862 };

const double ProblemPNAS::peak2[] = { -0.1672415, 0.4943422, 0.7580758,
		1.1468990, -0.4998344, 0.5640307, 0.8196745, 0.9164522, 0.3128365,
		-0.8598402, -0.7395364, 0.7809853, -0.6146653, -0.7038156, 0.6329511,
		0.5237213, 0.0380102, -0.2807876, -0.3566380, -0.7487106, 0.4943422,
		0.6096196, 0.5772608, 0.2086067, 0.2436864, 0.3396075, -0.0023590,
		0.8872370, 0.1448693, 0.2233468, 0.1805796, 0.9413260, 0.2460896,
		0.0083139, 0.5545250, 0.5231457, 0.2139152, -0.2750380, -0.1834167,
		0.1724995, 0.7580758, 0.5772608, 0.3756920, 0.5848335, 0.3967360,
		0.5579407, 0.7606822, 0.9508631, 0.2651063, 0.7010890, 0.6922675,
		0.5545444, 0.3654943, 0.5438459, 0.6767306, 0.5912040, 0.4301030,
		0.5012030, 0.4640061, 0.6754296, 1.1468990, 0.2086067, 0.5848335,
		1.1288319, 1.0318087, 0.8985275, 1.3015161, 1.1692438, 0.2873095,
		1.1234659, 1.1528219, -0.0226881, 0.8884254, 1.0566288, 0.9066357,
		0.9392829, 0.7880240, 0.7725406, 0.7847839, 1.1518912, -0.4998344,
		0.2436864, 0.3967360, 1.0318087, -1.5915652, 0.3579986, 0.8744626,
		0.3292733, -0.2602949, -0.9459646, -0.8248169, 0.5377702, -0.8107448,
		-0.8319583, 0.2681050, 0.0816220, -0.0651876, -0.5594803, -0.4802988,
		-0.8967247, 0.5640307, 0.3396075, 0.5579407, 0.8985275, 0.3579986,
		0.5364210, 0.6706870, 1.0281541, 0.2303814, 0.2509477, 0.2845246,
		0.4746387, 0.1708973, 0.1511572, 0.5885296, 0.6446355, 0.2488664,
		0.1312525, 0.1644569, 0.3242448, 0.8196745, -0.0023590, 0.7606822,
		1.3015161, 0.8744626, 0.6706870, 1.2454227, 1.3017358, 0.3896566,
		0.5921205, 0.5647111, -0.1520856, 0.6368373, 0.4788855, 0.7928222,
		0.9100110, 0.5430937, 0.3290821, 0.4191498, 0.5312637, 0.9164522,
		0.8872370, 0.9508631, 1.1692438, 0.3292733, 1.0281541, 1.3017358,
		1.1975302, 0.7041219, 0.3512866, 0.3874734, 1.1370881, 0.2152580,
		0.0906860, 1.1048590, 0.9918150, 0.7183929, 0.2729237, 0.2259642,
		0.4650751, 0.3128365, 0.1448693, 0.2651063, 0.2873095, -0.2602949,
		0.2303814, 0.3896566, 0.7041219, -0.7685950, 0.0337459, 0.0713973,
		0.3421050, 0.0009360, -0.1813726, 0.3906189, 0.3126809, 0.1858785,
		-0.0458961, -0.1863597, 0.1037054, -0.8598402, 0.2233468, 0.7010890,
		1.1234659, -0.9459646, 0.2509477, 0.5921205, 0.3512866, 0.0337459,
		-1.3028928, -1.1423733, 0.3729964, -0.9579520, -0.9677640, 0.3781695,
		0.1066345, -0.3596582, -0.4982418, -0.6000340, -1.2531054, -0.7395364,
		0.1805796, 0.6922675, 1.1528219, -0.8248169, 0.2845246, 0.5647111,
		0.3874734, 0.0713973, -1.1423733, -1.0583863, 0.3980730, -0.8880321,
		-0.9124876, 0.4098841, 0.2460181, -0.1890029, -0.5131067, -0.5426876,
		-1.1228344, 0.7809853, 0.9413260, 0.5545444, -0.0226881, 0.5377702,
		0.4746387, -0.1520856, 1.1370881, 0.3421050, 0.3729964, 0.3980730,
		1.0459781, 0.4675576, 0.2905749, 0.8456230, 0.6193312, 0.2425837,
		0.0291843, -0.1797467, 0.3727679, -0.6146653, 0.2460896, 0.3654943,
		0.8884254, -0.8107448, 0.1708973, 0.6368373, 0.2152580, 0.0009360,
		-0.9579520, -0.8880321, 0.4675576, -0.9279251, -0.9937792, 0.2071937,
		0.0199104, -0.2801989, -0.6241051, -0.5897053, -0.9296069, -0.7038156,
		0.0083139, 0.5438459, 1.0566288, -0.8319583, 0.1511572, 0.4788855,
		0.0906860, -0.1813726, -0.9677640, -0.9124876, 0.2905749, -0.9937792,
		-0.9731623, 0.2982109, 0.1082453, -0.1385897, -0.6281864, -0.6403081,
		-0.9669289, 0.6329511, 0.5545250, 0.6767306, 0.9066357, 0.2681050,
		0.5885296, 0.7928222, 1.1048590, 0.3906189, 0.3781695, 0.4098841,
		0.8456230, 0.2071937, 0.2982109, 0.7487819, 0.7433076, 0.5335335,
		0.0010487, 0.0602303, 0.4157603, 0.5237213, 0.5231457, 0.5912040,
		0.9392829, 0.0816220, 0.6446355, 0.9100110, 0.9918150, 0.3126809,
		0.1066345, 0.2460181, 0.6193312, 0.0199104, 0.1082453, 0.7433076,
		0.5559352, 0.3440534, 0.1121902, 0.2234670, 0.1796705, 0.0380102,
		0.2139152, 0.4301030, 0.7880240, -0.0651876, 0.2488664, 0.5430937,
		0.7183929, 0.1858785, -0.3596582, -0.1890029, 0.2425837, -0.2801989,
		-0.1385897, 0.5335335, 0.3440534, -0.0321809, 0.1959971, 0.1115300,
		-0.3376315, -0.2807876, -0.2750380, 0.5012030, 0.7725406, -0.5594803,
		0.1312525, 0.3290821, 0.2729237, -0.0458961, -0.4982418, -0.5131067,
		0.0291843, -0.6241051, -0.6281864, 0.0010487, 0.1121902, 0.1959971,
		-0.2770927, -0.3951671, -0.4638251, -0.3566380, -0.1834167, 0.4640061,
		0.7847839, -0.4802988, 0.1644569, 0.4191498, 0.2259642, -0.1863597,
		-0.6000340, -0.5426876, -0.1797467, -0.5897053, -0.6403081, 0.0602303,
		0.2234670, 0.1115300, -0.3951671, -0.2682354, -0.5605187, -0.7487106,
		0.1724995, 0.6754296, 1.1518912, -0.8967247, 0.3242448, 0.5312637,
		0.4650751, 0.1037054, -1.2531054, -1.1228344, 0.3727679, -0.9296069,
		-0.9669289, 0.4157603, 0.1796705, -0.3376315, -0.4638251, -0.5605187,
		-1.2482731 };

const double ProblemPNAS::peak3[] = { -0.7000701, -0.1888954, -0.0684516,
		-0.1375482, -0.4017985, -0.2728097, -0.3117626, -0.2112361, -0.2017463,
		-0.2697658, -0.2300777, -0.2050513, -0.1619156, -0.0813445, 0.0161403,
		-0.2702681, -0.3233138, 0.0498159, 0.0042140, -0.5201966, -0.1888954,
		-0.0003603, -0.0183153, -0.2921576, 0.4318043, -0.1909436, -0.4446131,
		0.0731663, -0.0586524, 0.5672488, 0.3799041, -0.1242799, 0.4585581,
		0.5030350, 0.0526235, -0.1875623, 0.0039210, 0.4748226, 0.3491207,
		0.3375111, -0.0684516, -0.0183153, -0.2773501, -0.1273107, 0.0851091,
		-0.2051120, -0.2469975, 0.0087992, -0.2528239, 0.5462178, 0.3914385,
		-0.2782104, 0.4807887, 0.4739024, 0.0955314, -0.2043958, -0.1528226,
		0.3708969, 0.3151769, 0.2391548, -0.1375482, -0.2921576, -0.1273107,
		-0.1822408, 0.2955857, -0.2816207, -0.2206645, -0.0041879, -0.2851325,
		0.5917708, 0.4914093, -0.5768852, 0.2951485, 0.5774145, 0.0051540,
		-0.1332767, -0.0735890, 0.3635451, 0.3962205, 0.3777297, -0.4017985,
		0.4318043, 0.0851091, 0.2955857, -1.6974752, 0.1467930, 0.3222981,
		-0.1251742, 0.0087878, -0.0219703, -0.0947663, 0.4653973, 0.0085244,
		0.0715854, 0.2174262, 0.1758769, 0.3128222, 0.1713573, -0.0137667,
		-0.2685506, -0.2728097, -0.1909436, -0.2051120, -0.2816207, 0.1467930,
		-0.3495526, -0.3419881, -0.0091917, -0.1281210, 0.4394755, 0.2652352,
		-0.4414618, 0.4010720, 0.4902509, 0.0341890, -0.2660186, -0.1910775,
		0.2818319, 0.3622560, 0.2082895, -0.3117626, -0.4446131, -0.2469975,
		-0.2206645, 0.3222981, -0.3419881, -0.3719535, 0.1329601, -0.3111966,
		0.4172941, 0.4030621, -0.7244408, 0.4869667, 0.4589822, -0.0271129,
		-0.2361002, -0.1856943, 0.2786536, 0.2481231, 0.2512324, -0.2112361,
		0.0731663, 0.0087992, -0.0041879, -0.1251742, -0.0091917, 0.1329601,
		-0.1728177, -0.0840528, 0.1084186, 0.1388954, 0.0336066, 0.0559074,
		0.1460075, 0.1609435, -0.0945514, -0.0448668, 0.1863427, 0.2787016,
		-0.0271751, -0.2017463, -0.0586524, -0.2528239, -0.2851325, 0.0087878,
		-0.1281210, -0.3111966, -0.0840528, -1.2233530, 0.3768696, 0.3712114,
		-0.1745085, 0.2074352, 0.3579798, -0.0040807, -0.2620560, -0.2036832,
		0.1553888, 0.0433179, 0.1630290, -0.2697658, 0.5672488, 0.5462178,
		0.5917708, -0.0219703, 0.4394755, 0.4172941, 0.1084186, 0.3768696,
		0.0778587, 0.0689283, 0.4059339, 0.1237993, 0.2329798, 0.6096300,
		0.1846867, 0.2536126, 0.4334944, 0.3052356, -0.1899295, -0.2300777,
		0.3799041, 0.3914385, 0.4914093, -0.0947663, 0.2652352, 0.4030621,
		0.1388954, 0.3712114, 0.0689283, 0.0292204, 0.3035916, 0.1994725,
		0.3027682, 0.4244812, 0.1600023, 0.2159995, 0.3435541, 0.3948932,
		-0.1099714, -0.2050513, -0.1242799, -0.2782104, -0.5768852, 0.4653973,
		-0.4414618, -0.7244408, 0.0336066, -0.1745085, 0.4059339, 0.3035916,
		-0.2912018, 0.3195876, 0.4372556, -0.0995580, -0.2326895, -0.2567081,
		0.4419106, 0.1765027, 0.1477546, -0.1619156, 0.4585581, 0.4807887,
		0.2951485, 0.0085244, 0.4010720, 0.4869667, 0.0559074, 0.2074352,
		0.1237993, 0.1994725, 0.3195876, 0.0501469, 0.2726389, 0.6595620,
		0.2173634, 0.0435540, 0.2067541, 0.4393646, -0.0374821, -0.0813445,
		0.5030350, 0.4739024, 0.5774145, 0.0715854, 0.4902509, 0.4589822,
		0.1460075, 0.3579798, 0.2329798, 0.3027682, 0.4372556, 0.2726389,
		0.1993342, 0.5312197, 0.2059043, 0.3258661, 0.3591374, 0.4629789,
		0.1911488, 0.0161403, 0.0526235, 0.0955314, 0.0051540, 0.2174262,
		0.0341890, -0.0271129, 0.1609435, -0.0040807, 0.6096300, 0.4244812,
		-0.0995580, 0.6595620, 0.5312197, 0.4379927, 0.0229626, 0.0567726,
		0.6426396, 0.5351448, 0.4038160, -0.2702681, -0.1875623, -0.2043958,
		-0.1332767, 0.1758769, -0.2660186, -0.2361002, -0.0945514, -0.2620560,
		0.1846867, 0.1600023, -0.2326895, 0.2173634, 0.2059043, 0.0229626,
		-0.1728528, -0.1926886, 0.3853551, -0.0092831, 0.0729803, -0.3233138,
		0.0039210, -0.1528226, -0.0735890, 0.3128222, -0.1910775, -0.1856943,
		-0.0448668, -0.2036832, 0.2536126, 0.2159995, -0.2567081, 0.0435540,
		0.3258661, 0.0567726, -0.1926886, -0.2658916, 0.3173600, 0.2698943,
		0.0202025, 0.0498159, 0.4748226, 0.3708969, 0.3635451, 0.1713573,
		0.2818319, 0.2786536, 0.1863427, 0.1553888, 0.4334944, 0.3435541,
		0.4419106, 0.2067541, 0.3591374, 0.6426396, 0.3853551, 0.3173600,
		0.0714542, 0.2928222, 0.3708242, 0.0042140, 0.3491207, 0.3151769,
		0.3962205, -0.0137667, 0.3622560, 0.2481231, 0.2787016, 0.0433179,
		0.3052356, 0.3948932, 0.1765027, 0.4393646, 0.4629789, 0.5351448,
		-0.0092831, 0.2698943, 0.2928222, 0.6934823, 0.2298344, -0.5201966,
		0.3375111, 0.2391548, 0.3777297, -0.2685506, 0.2082895, 0.2512324,
		-0.0271751, 0.1630290, -0.1899295, -0.1099714, 0.1477546, -0.0374821,
		0.1911488, 0.4038160, 0.0729803, 0.0202025, 0.3708242, 0.2298344,
		-0.3373825 };

ProblemPNAS::ProblemPNAS() :
		ProblemBase(), nmodes(0), em(NULL), lsingle(0), lpair(0), dim1body(0), dim2body(
				0) {

	/* */

}

ProblemPNAS::~ProblemPNAS() {

	Free();

}

void ProblemPNAS::Allocate() {

	em = (double*) malloc(nmodes * 20 * 20 * sizeof(double));

}

void ProblemPNAS::Free() {

	free(em);

}

ProblemPNAS::ProblemPNAS(const MSAclass &MSA_, size_t n) :
		ProblemBase(MSA_), nmodes(n), em(
		NULL), lsingle(0), lpair(0), dim1body(0), dim2body(0) {

	assert(n > 0 && n < 4); /* condition (1<=n<=3) failed*/

	Allocate();

	/*
	 * set em
	 */
	memcpy(em, peak1, 400 * sizeof(double));
	if (nmodes > 1) {
		memcpy(em + 400, peak2, 400 * sizeof(double));
	}
	if (nmodes > 2) {
		memcpy(em + 800, peak3, 400 * sizeof(double));
	}

	/*
	 * set regularization params
	 */
	lsingle = 0.01;
	lpair = 0.01; //0.2 * (MSA->GetNcol() - 1);

	/*
	 * set dimensions
	 */
	size_t ncol = MSA->GetNcol();
	dim1body = ncol * MSAclass::NAA;
	dim2body = ncol * ncol * nmodes;
	dim = dim1body + dim2body;

}

double ProblemPNAS::f(const double *x) {

	double f = 0.0;

	size_t ncol = MSA->GetNcol();
	size_t nrow = MSA->GetNrow();
	size_t NAA = MSAclass::NAA;

	const double *x1 = x; /* local fields Vi */
	const double *x2 = x + dim1body; /* couplings Wij */

	/* loop over all sequences in the MSA */
	for (size_t i = 0; i < nrow; i++) {

		/* sequence weight */
		double weight = w[i];

		/* current sequence */
		unsigned char *seq = msa + i * ncol;

		/* precomputed energies of every letter
		 * at every position in the sequence */
		double *e = (double*) malloc(NAA * ncol * sizeof(double));

		/* logarithm of local partition functions
		 * (aka one-site pseudo-log-likelihoods
		 * or local free energies) */
		double *lp = (double*) malloc(ncol * sizeof(double));

		/* initialize energies with local fields */
		memcpy(e, x1, ncol * (NAA - 1) * sizeof(double));

		/* fix the local fields for gaps at zero */
		memset(e + (NAA - 1) * ncol, 0, ncol * sizeof(double));

		/* add interactions with all other positions */
		for (size_t k = 0; k < ncol; k++) {

			for (size_t j = 0; j < ncol; j++) {

				/* interaction coefficients for edge k -> j */
				const double *ckj = x2 + (k * ncol + j) * nmodes;

				/* scan through all AA identities at position j */
				for (size_t a = 0; a < NAA - 1; a++) {

					/* add up contributions from all eigenmodes */
					for (size_t n = 0; n < nmodes; n++) {
						e[a * ncol + k] += ckj[n]
								* em[n * 400 + a * 20 + seq[j]];
					}
				}
			}

		}

		/* compute local partition functions */
		memset(lp, 0, sizeof(double) * ncol);
		for (size_t a = 0; a < NAA; a++) {
			for (size_t s = 0; s < ncol; s++) {
				lp[s] += exp(e[a * ncol + s]);
			}
		}

		for (size_t s = 0; s < ncol; s++) {
			lp[s] = log(lp[s]);
		}

		/* update the objective function */
		for (size_t k = 0; k < ncol; k++) {
			f += weight * (-e[seq[k] * ncol + k] + lp[k]);
		}

		free(e);
		free(lp);

	}

	/* regularization - 1-body terms */
	double reg = 0.0;
	for (size_t v = 0; v < dim1body; v++) {
		reg += lsingle * x[v] * x[v];
	}

	/* regularization - 2-body terms */
	for (size_t ij = 0; ij < ncol * ncol; ij++) {
		const double *c = x2 + ij * nmodes;
		for (size_t k = 0; k < nmodes * 400; k++) {
			double r = em[k] * c[k / 400];
			reg += 0.5 * lpair * r * r;
		}
	}

	f += reg;

	return f;

}

void ProblemPNAS::df(const double *x, double *g) {

	double f = 0.0;
	fdf(x, &f, g);

}

void ProblemPNAS::fdf(const double *x, double *f, double *g) {

	size_t ncol = MSA->GetNcol();
	size_t nrow = MSA->GetNrow();
	size_t NAA = MSAclass::NAA;

	const double *x1 = x; /* local fields Vi */
	const double *x2 = x + dim1body; /* couplings Wij */

	double *g1 = g;
	double *g2 = g + dim1body;

	/* set fx and gradient to 0 initially */
	*f = 0.0;
	memset(g, 0, sizeof(double) * dim);

	/* aux array to store asymmetric 2-body gradient */
	double *gaux = (double*) calloc(dim2body, sizeof(double));

	/* loop over all sequences in the MSA */
	for (size_t i = 0; i < nrow; i++) {

		double weight = w[i];
		unsigned char *seq = msa + i * ncol;

		/* precomputed energies of every letter
		 * at every position in the sequence */
		double *e = (double*) malloc(NAA * ncol * sizeof(double));
		if (e == NULL) {
			printf("Error: not enough memory\n");
		}

		/* logarithm of local partition functions
		 * (aka one-site pseudo-log-likelihoods
		 * or local free energies) */
		double *lp = (double*) malloc(ncol * sizeof(double));
		if (lp == NULL) {
			printf("Error: not enough memory\n");
		}

		/* local probabilities of a every letter
		 * at every position in the sequence*/
		double *p = (double*) malloc(NAA * ncol * sizeof(double));
		if (p == NULL) {
			printf("Error: not enough memory\n");
		}

		/* initialize energies with local fields */
		memcpy(e, x1, ncol * (NAA - 1) * sizeof(double));

		/* fix the local fields for gaps at zero */
		memset(e + (NAA - 1) * ncol, 0, ncol * sizeof(double));

		/* add interactions with all other positions */
		for (size_t k = 0; k < ncol; k++) {

			for (size_t j = 0; j < ncol; j++) {

				/* interaction coefficients for edge k -> j */
				const double *ckj = x2 + (k * ncol + j) * nmodes;

				/* scan through all AA identities at position j */
				for (size_t a = 0; a < NAA - 1; a++) {

					/* add up contributions from all eigenmodes */
					for (size_t n = 0; n < nmodes; n++) {
						if (seq[j] < 20) {
							e[a * ncol + k] += ckj[n]
									* em[n * 400 + a * 20 + seq[j]];
						}
					}
				}
			}

		}

		/* compute local partition functions */
		memset(lp, 0, sizeof(double) * ncol);
		for (size_t a = 0; a < NAA; a++) {
			for (size_t s = 0; s < ncol; s++) {
				lp[s] += exp(e[a * ncol + s]);
			}
		}

		for (size_t s = 0; s < ncol; s++) {
			lp[s] = log(lp[s]);
		}

		/* compute local probabilities */
		for (size_t a = 0; a < NAA; a++) {
			for (size_t s = 0; s < ncol; s++) {
				p[a * ncol + s] = exp(e[a * ncol + s] - lp[s]);
			}
		}

		/* compute f and derivatives of h[] */
		for (size_t k = 0; k < ncol; k++) {

			unsigned char xik = seq[k];

			*f += weight * (-e[xik * ncol + k] + lp[k]);

			if (xik < NAA - 1) {
				g1[xik * ncol + k] -= weight;
			}

			for (size_t a = 0; a < NAA - 1; a++) {
				g1[a * ncol + k] += weight * p[a * ncol + k];
			}

		}

		/* derivatives of J[][] */
		for (size_t k = 0; k < ncol; k++) {

			if (seq[k] >= 20) {
				continue;
			}

			for (size_t j = 0; j < ncol; j++) {

				if (seq[j] >= 20) {
					continue;
				}

				for (size_t n = 0; n < nmodes; n++) {

					double *gg = gaux + (k * ncol + j) * nmodes + n;
					double *JJ = em + n * 400;
					*gg -= weight * JJ[seq[k] * 20 + seq[j]];

					for (size_t c = 0; c < 20; c++) {
						*gg += weight * JJ[c * 20 + seq[j]] * p[c * ncol + k];
					}

				}
			}
		}

		free(e);
		free(lp);
		free(p);

	}

	/* make derivatives of J[][] symmetric -
	 * add transposed onto untransposed */
	for (size_t i = 0; i < ncol; i++) {
		for (size_t j = 0; j < ncol; j++) {
			for (size_t k = 0; k < nmodes; k++) {
				g2[(i * ncol + j) * nmodes + k] = gaux[(i * ncol + j) * nmodes
						+ k] + gaux[(j * ncol + i) * nmodes + k];
			}
		}
		for (size_t k = 0; k < nmodes; k++) {
			g2[(i * ncol + i) * nmodes + k] = 0.0;
		}
	}

	free(gaux);

	double reg = 0.0;

	/* regularize h */
	for (size_t v = 0; v < dim1body; v++) {
		reg += lsingle * x[v] * x[v];
		g[v] += 2.0 * lsingle * x[v];
	}

	/* regularize J */
	for (size_t v = dim1body; v < dim; v++) {
		reg += 0.5 * lpair * x[v] * x[v];
		g[v] += 2.0 * lpair * x[v];
	}
//	for (size_t ij = 0; ij < ncol * ncol; ij++) {
//
//		const double *c = x2 + ij * nmodes;
//
//		double *rr = (double*) calloc(400, sizeof(double));
//		for (size_t pq = 0; pq < 400; pq++) {
//			for (size_t n = 0; n < nmodes; n++) {
//				rr[pq] += em[n * 400 + pq] * c[n];
//			}
//		}
//
//		for (size_t pq = 0; pq < 400; pq++) {
//			reg += 0.5 * lpair * rr[pq] * rr[pq];
//		}
//
//		for (size_t n = 0; n < nmodes; n++) {
//			for (size_t ab = 0; ab < 400; ab++) {
//				g2[ij * nmodes + n] += 2.0 * lpair * em[400 * nmodes + ab]
//						* rr[ab];
//			}
//		}
//
//		free(rr);
//	}

	*f += reg;

}

void ProblemPNAS::GetMRFvector(const double *x, double *mrfx) {

	size_t NAA = MSAclass::NAA;
	size_t ncol = MSA->GetNcol();

	size_t dim_mrf = ncol * NAA + ncol * ncol * NAA * NAA;

	memset(mrfx, 0, dim_mrf * sizeof(double));

	for (size_t i = 0; i < ncol; i++) {
		for (size_t a = 0; a < NAA; a++) {
			mrfx[i * NAA + a] = x[a * ncol + i];
		}
	}

	for (size_t i = 0; i < ncol; i++) {
		for (size_t j = 0; j < ncol; j++) {
			double *Jij = mrfx + ncol * NAA + (i * ncol + j) * NAA * NAA;
			const double *cij = x + dim1body + (i * ncol + j) * nmodes;
			double s = 0.0;
			for (size_t n = 0; n < nmodes; n++) {
				s += cij[n] * cij[n];
			}
			printf("%.5e ", s);
			for (size_t a = 0; a < NAA - 1; a++) {
				for (size_t b = 0; b < NAA - 1; b++) {
					for (size_t n = 0; n < nmodes; n++) {
						Jij[a * NAA + b] += cij[n] * em[n * 400 + (a * 20 + b)];
					}
				}
			}
		}
		printf("\n");
	}

}
